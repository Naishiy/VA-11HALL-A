import java.lang.Math;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;


public class Lab3Z3 {

    public static void main() {
        /*Задание 3.6*/

        //Circle[] circles = new Circle[3];

        List<Circle> circles = new ArrayList();

        Circle circles0 = new Circle(new Rational(BigInteger.valueOf(1), BigInteger.valueOf(2)),
                new Rational(BigInteger.valueOf(3), BigInteger.valueOf(4)),
                new Rational(BigInteger.valueOf(5), BigInteger.valueOf(2)));

        Circle circles1 = new Circle(new Rational(BigInteger.valueOf(2), BigInteger.valueOf(3)),
                new Rational(BigInteger.valueOf(4), BigInteger.valueOf(5)),
                new Rational(BigInteger.valueOf(3), BigInteger.valueOf(4)));

        Circle circles2 = new Circle(new Rational(BigInteger.valueOf(3), BigInteger.valueOf(4)),
                new Rational(BigInteger.valueOf(5), BigInteger.valueOf(6)),
                new Rational(BigInteger.valueOf(1), BigInteger.valueOf(2)));

        circles.add(circles0);
        circles.add(circles1);
        circles.add(circles2);

        // Определение окружностей с центрами на одной прямой

        List<Circle> onOneLine = new ArrayList();
        double exp = 1e-15;

        for(int c = 0; c < circles.size() - 2; c++){
            double equationOfLine = Math.abs((circles.get(c+1).getX() - circles.get(c).getX())/(circles.get(c+2).getX() - circles.get(c+1).getX()) -
                    (circles.get(c+1).getY() - circles.get(c).getY())/(circles.get(c+2).getY() - circles.get(c+1).getY()));
            if(equationOfLine <= exp){
                onOneLine.add(circles.get(c));
                onOneLine.add(circles.get(c+1));
                onOneLine.add(circles.get(c+2));
            }
        }

        System.out.println("Окружности, центры которых лежат на одной прямой: ");
        System.out.println(onOneLine);
        System.out.println();

        // Определение наибольшего и наименьшего по площади (периметру) объекта

        Comparator maxArea = new MaxAreaObject();
        Collections.sort(circles, maxArea);
        System.out.println("Круг с наибольшей площадью: " + circles.get(0));
        System.out.println("Площадь: " + circles.get(0).getArea());
        System.out.println();


        Comparator minArea = new MinAreaObject();
        Collections.sort(circles, minArea);
        System.out.println("Круг с наименьшей площадью: " + circles.get(0));
        System.out.println("Площадь: " + circles.get(0).getArea());
        System.out.println();

        Comparator maxPerimeter = new MaxPerimeterObject();
        Collections.sort(circles, maxPerimeter);
        System.out.println("Круг с наибольшим периметром: " + circles.get(0));
        System.out.println("Периметр: " + circles.get(0).getArea());
        System.out.println();

        Comparator minPerimeter = new MinPerimeterObject();
        Collections.sort(circles, minPerimeter);
        System.out.println("Круг с наименьшим периметром: " + circles.get(0));
        System.out.println("Периметр: " + circles.get(0).getArea());
        System.out.println();

    }
}

class Rational {
    private BigInteger numerator;
    private BigInteger denominator;

    public Rational(BigInteger numerator, BigInteger denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
    }

    public BigInteger getNumerator() {
        return this.numerator;
    }

    public BigInteger getDenominator() {
        return this.denominator;
    }

    public double getRational(){
        return this.numerator.doubleValue() / this.denominator.doubleValue();
    }
}

class Circle {
    private Rational x; // Координата x центра окружности
    private Rational y; // Координата y центра окружности
    private Rational radius; // Радиус окружности

    public Circle(Rational x, Rational y, Rational radius) {
        this.x = x;
        this.y = y;
        this.radius = radius;
    }

    public double getX() {
        return x.getRational();
    }

    public double getY() {
        return y.getRational();
    }

    public double getArea() {
        double r = radius.getNumerator().doubleValue() / radius.getDenominator().doubleValue();
        return 3.14 * r * r;
    }

    public double getPerimeter() {
        double r = radius.getNumerator().doubleValue() / radius.getDenominator().doubleValue();
        return 2 * 3.14 * r;
    }

    public String toString(){
        return "(" + x.getRational() + ", " + y.getRational() + "), радиус = " + radius.getRational();
    }
}

class MinAreaObject implements Comparator<Circle> {

    public int compare(Circle o1, Circle o2){
        return (int) (o1.getArea() - o2.getArea());
    }

}

class MaxAreaObject implements Comparator<Circle> {

    public int compare(Circle o1, Circle o2){
        return (int) (o2.getArea() - o1.getArea());
    }

}

class MinPerimeterObject implements Comparator<Circle> {

    public int compare(Circle o1, Circle o2){
        return (int) (o1.getPerimeter() - o2.getPerimeter());
    }

}

class MaxPerimeterObject implements Comparator<Circle> {

    public int compare(Circle o1, Circle o2){
        return (int) (o2.getPerimeter() - o1.getPerimeter());
    }

}
