import java.lang.invoke.SwitchPoint;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;

public class Lab3Z2 {

    public static void main() {
        /*Задание 2.8*/

        Quadrilaterals[] quadrilaterals = new Quadrilaterals[5];

        creatingObjects(quadrilaterals);

        byte countSquares = 0;
        byte countRhombs = 0;
        byte countRectangles = 0;
        byte countArbitraryes = 0;

        ArrayList<Quadrilaterals> squares = new ArrayList<>();
        ArrayList<Quadrilaterals> rhombs = new ArrayList<>();
        ArrayList<Quadrilaterals> rectangles = new ArrayList<>();
        ArrayList<Quadrilaterals> arbitraryes = new ArrayList<>();

        ArrayList<Double> squaresPerimeter = new ArrayList<>();
        ArrayList<Double> rhombsPerimeter = new ArrayList<>();
        ArrayList<Double> rectanglesPerimeter = new ArrayList<>();
        ArrayList<Double> arbitraryesPerimeter = new ArrayList<>();

        ArrayList<Double> squaresArea = new ArrayList<>();
        ArrayList<Double> rhombsArea = new ArrayList<>();
        ArrayList<Double> rectanglesArea = new ArrayList<>();
        ArrayList<Double> arbitraryesArea = new ArrayList<>();

        for (Quadrilaterals quadrilateral: quadrilaterals) {
            if (quadrilateral.getType().equals("square")){
                countSquares++;
                squares.add(quadrilateral);
                squaresPerimeter.add(quadrilateral.getPerimeter());
                squaresArea.add(quadrilateral.getArea());
            }
            else {
                if (quadrilateral.getType().equals("rhomb")) {
                    countRhombs++;
                    rhombs.add(quadrilateral);
                    rhombsPerimeter.add(quadrilateral.getPerimeter());
                    rhombsArea.add(quadrilateral.getArea());
                }
                else {
                    if (quadrilateral.getType().equals("rectangle")) {
                        countRectangles++;
                        rectangles.add(quadrilateral);
                        rectanglesPerimeter.add(quadrilateral.getPerimeter());
                        rectanglesArea.add(quadrilateral.getArea());
                    }
                    else {
                        countArbitraryes++;
                        arbitraryes.add(quadrilateral);
                        arbitraryesPerimeter.add(quadrilateral.getPerimeter());
                        arbitraryesArea.add(quadrilateral.getArea());
                    }
                }
            }
        }

        printingCountingOfQuadrilaterals(countSquares, countRhombs, countRectangles, countArbitraryes);

        minArea(squaresArea, squares, rhombsArea, rhombs, rectanglesArea, rectangles, arbitraryesArea, arbitraryes);

        maxArea(squaresArea, squares, rhombsArea, rhombs, rectanglesArea, rectangles, arbitraryesArea, arbitraryes);

        minPerimeter(squaresPerimeter, squares, rhombsPerimeter, rhombs, rectanglesPerimeter, rectangles, arbitraryesPerimeter, arbitraryes);

        maxPerimeter(squaresPerimeter, squares, rhombsPerimeter, rhombs, rectanglesPerimeter, rectangles, arbitraryesPerimeter, arbitraryes);

    }

    private static void printingCountingOfQuadrilaterals(byte countSquares, byte countRhombs, byte countRectangles, byte countArbitraryes) {
        System.out.println("Квадратов - " + countSquares + ", Ромбов - " +
                countRhombs + ", Прямоугольников - " + countRectangles +
                ", Произвольных (в т.ч. трапеций) - " + countArbitraryes);
        System.out.println();
    }

    private static void maxPerimeter(ArrayList<Double> squaresPerimeter, ArrayList<Quadrilaterals> squares, ArrayList<Double> rhombsPerimeter, ArrayList<Quadrilaterals> rhombs, ArrayList<Double> rectanglesPerimeter, ArrayList<Quadrilaterals> rectangles, ArrayList<Double> arbitraryesPerimeter, ArrayList<Quadrilaterals> arbitraryes) {
        System.out.println("Квадрат с максимальным периметром: ");
        squaresPerimeter.sort(Collections.reverseOrder());
        for(Quadrilaterals s: squares){
            if(s.getPerimeter() == squaresPerimeter.get(0)){
                System.out.println(s);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(squaresPerimeter.get(0));
        System.out.println();

        System.out.println("Ромб с максимальным периметром: ");
        rhombsPerimeter.sort(Collections.reverseOrder());
        for(Quadrilaterals r: rhombs){
            if(r.getPerimeter() == rhombsPerimeter.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(rhombsPerimeter.get(0));
        System.out.println();

        System.out.println("Прямоугольник с максимальным периметром: ");
        rectanglesPerimeter.sort(Collections.reverseOrder());
        for(Quadrilaterals r: rectangles){
            if(r.getPerimeter() == rectanglesPerimeter.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(rectanglesPerimeter.get(0));
        System.out.println();

        System.out.println("Четырехугольник с максимальным периметром: ");
        arbitraryesPerimeter.sort(Collections.reverseOrder());
        for(Quadrilaterals a: arbitraryes){
            if(a.getPerimeter() == arbitraryesPerimeter.get(0)){
                System.out.println(a);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(arbitraryesPerimeter.get(0));
        System.out.println();
    }

    private static void minPerimeter(ArrayList<Double> squaresPerimeter, ArrayList<Quadrilaterals> squares, ArrayList<Double> rhombsPerimeter, ArrayList<Quadrilaterals> rhombs, ArrayList<Double> rectanglesPerimeter, ArrayList<Quadrilaterals> rectangles, ArrayList<Double> arbitraryesPerimeter, ArrayList<Quadrilaterals> arbitraryes) {
        System.out.println("Квадрат с минимальным периметром: ");
        Collections.sort(squaresPerimeter);
        for(Quadrilaterals s: squares){
            if(s.getPerimeter() == squaresPerimeter.get(0)){
                System.out.println(s);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(squaresPerimeter.get(0));
        System.out.println();

        System.out.println("Ромб с минимальным периметром: ");
        Collections.sort(rhombsPerimeter);
        for(Quadrilaterals r: rhombs){
            if(r.getPerimeter() == rhombsPerimeter.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(rhombsPerimeter.get(0));
        System.out.println();

        System.out.println("Прямоугольник с минимальным периметром: ");
        Collections.sort(rectanglesPerimeter);
        for(Quadrilaterals r: rectangles){
            if(r.getPerimeter() == rectanglesPerimeter.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(rectanglesPerimeter.get(0));
        System.out.println();

        System.out.println("Четырехугольник с минимальным периметром: ");
        Collections.sort(arbitraryesPerimeter);
        for(Quadrilaterals a: arbitraryes){
            if(a.getPerimeter() == arbitraryesPerimeter.get(0)){
                System.out.println(a);
            }
        }
        System.out.println("Периметр: ");
        System.out.println(arbitraryesPerimeter.get(0));
        System.out.println();
    }

    private static void maxArea(ArrayList<Double> squaresArea, ArrayList<Quadrilaterals> squares, ArrayList<Double> rhombsArea, ArrayList<Quadrilaterals> rhombs, ArrayList<Double> rectanglesArea, ArrayList<Quadrilaterals> rectangles, ArrayList<Double> arbitraryesArea, ArrayList<Quadrilaterals> arbitraryes) {
        System.out.println("Квадарат с макcимальной площадью: ");
        squaresArea.sort(Collections.reverseOrder());
        for(Quadrilaterals s: squares){
            if(s.getArea() == squaresArea.get(0)){
                System.out.println(s);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(squaresArea.get(0));
        System.out.println();

        System.out.println("Ромб с макcимальной площадью: ");
        rhombsArea.sort(Collections.reverseOrder());
        for(Quadrilaterals r: rhombs){
            if(r.getArea() == rhombsArea.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(rhombsArea.get(0));
        System.out.println();

        System.out.println("Прямоугольник с макcимальной площадью: ");
        rectanglesArea.sort(Collections.reverseOrder());
        for(Quadrilaterals r: rectangles){
            if(r.getArea() == rectanglesArea.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(rectanglesArea.get(0));
        System.out.println();

        System.out.println("Четырехугольник с макcимальной площадью: ");
        arbitraryesArea.sort(Collections.reverseOrder());
        for(Quadrilaterals a: arbitraryes){
            if(a.getArea() == arbitraryesArea.get(0)){
                System.out.println(a);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(arbitraryesArea.get(0));
        System.out.println();
    }

    private static void minArea(ArrayList<Double> squaresArea, ArrayList<Quadrilaterals> squares, ArrayList<Double> rhombsArea, ArrayList<Quadrilaterals> rhombs, ArrayList<Double> rectanglesArea, ArrayList<Quadrilaterals> rectangles, ArrayList<Double> arbitraryesArea, ArrayList<Quadrilaterals> arbitraryes) {
        System.out.println("Квадрат с минимальной площадью: ");
        Collections.sort(squaresArea);
        for(Quadrilaterals s: squares){
            if(s.getArea() == squaresArea.get(0)){
                System.out.println(s);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(squaresArea.get(0));
        System.out.println();


        System.out.println("Ромб с минимальной площадью: ");
        Collections.sort(rhombsArea);
        for(Quadrilaterals r: rhombs){
            if(r.getArea() == rhombsArea.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(rhombsArea.get(0));
        System.out.println();

        System.out.println("Прямоугольник с минимальной площадью: ");
        Collections.sort(rectanglesArea);
        for(Quadrilaterals r: rectangles){
            if(r.getArea() == rectanglesArea.get(0)){
                System.out.println(r);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(rectanglesArea.get(0));
        System.out.println();

        System.out.println("Четырехугольник с минимальной площадью: ");
        Collections.sort(arbitraryesArea);
        for(Quadrilaterals a: arbitraryes){
            if(a.getArea() == arbitraryesArea.get(0)){
                System.out.println(a);
            }
        }
        System.out.println("Площадь: ");
        System.out.println(arbitraryesArea.get(0));
        System.out.println();
    }

    private static void creatingObjects(Quadrilaterals[] quadrilaterals) {
        quadrilaterals[0] = new Quadrilaterals(4.0, 4.0, 4.0, 4.0,
                5.65685, 5.65685, 1.5708);
        quadrilaterals[1] = new Quadrilaterals(3.0, 4.0, 3.0, 4.0,
                5.0, 5.0, 0.82030475);
        quadrilaterals[2] = new Quadrilaterals(2.0, 1.0, 3.0, 1.0,
                5.0, 6.0, 0.234543);
        quadrilaterals[3] = new Quadrilaterals(1.0, 1.0, 1.0, 1.0,
                1.4142, 3.4142, 1.5708);
        quadrilaterals[4] = new Quadrilaterals(7.23,1.32,4.31, 9.11,
                5.01, 12.03, 0.23452);
    }
}

class Quadrilaterals {
    private double side1;
    private double side2;
    private double side3;
    private double side4;
    private double diagonal1;
    private double diagonal2;
    private double alpha;

    public Quadrilaterals(double side1, double side2, double side3, double side4, double diagonal1,
                          double diagonal2, double alpha) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
        this.side4 = side4;
        this.diagonal1 = diagonal1;
        this.diagonal2 = diagonal2;
        this.alpha = alpha;
    }

    public double getPerimeter() {

        return side1 + side2 + side3 + side4;
    }

    public double getArea() {
        /* square rectangle rhomb arbitrary */
        return 0.5 * diagonal1 * diagonal2 * Math.sin(alpha);
    }

    public String getType() {
        String id = new String();
        if (side1 == side2) {
            if (side3 == side4) {
                if (diagonal1 == diagonal2) {
                    id = "square";
                }
                else {
                    id = "rhomb";
                }
            }
            else {
                id = "arbitrary";
            }
        }
        else {
            if ((side1 == side3)&&(side2 == side4)&&(diagonal1 == diagonal2)){
                id = "rectangle";
            }
            else {
                id = "arbitrary";
            }
        }

        return id;
    }
    public String toString() {
        DecimalFormat df = new DecimalFormat("0.00");
        return  //this.getType() + ": " +
                df.format(side1) + ' ' +
                df.format(side2) + ' ' +
                df.format(side3) + ' ' +
                df.format(side4) + ' ' +
                df.format(diagonal1) + ' ' +
                df.format(diagonal2) + ' ' +
                df.format(alpha);
    }
}
